// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-csg325-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.370000,HLS_SYN_LAT=46,HLS_SYN_TPT=30,HLS_SYN_MEM=0,HLS_SYN_DSP=24,HLS_SYN_FF=10382,HLS_SYN_LUT=9349,HLS_VERSION=2019_1}" *)

module myproject (
        ap_clk,
        ap_rst_n,
        inputSignal_TDATA,
        inputSignal_TVALID,
        inputSignal_TREADY,
        inputSignal_TKEEP,
        inputSignal_TSTRB,
        inputSignal_TUSER,
        inputSignal_TLAST,
        inputSignal_TID,
        inputSignal_TDEST,
        outputPrediction_TDATA,
        outputPrediction_TVALID,
        outputPrediction_TREADY,
        outputPrediction_TKEEP,
        outputPrediction_TSTRB,
        outputPrediction_TUSER,
        outputPrediction_TLAST,
        outputPrediction_TID,
        outputPrediction_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 30'd1;
parameter    ap_ST_fsm_pp0_stage1 = 30'd2;
parameter    ap_ST_fsm_pp0_stage2 = 30'd4;
parameter    ap_ST_fsm_pp0_stage3 = 30'd8;
parameter    ap_ST_fsm_pp0_stage4 = 30'd16;
parameter    ap_ST_fsm_pp0_stage5 = 30'd32;
parameter    ap_ST_fsm_pp0_stage6 = 30'd64;
parameter    ap_ST_fsm_pp0_stage7 = 30'd128;
parameter    ap_ST_fsm_pp0_stage8 = 30'd256;
parameter    ap_ST_fsm_pp0_stage9 = 30'd512;
parameter    ap_ST_fsm_pp0_stage10 = 30'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 30'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 30'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 30'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 30'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 30'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 30'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 30'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 30'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 30'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 30'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 30'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 30'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 30'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 30'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 30'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 30'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 30'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 30'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 30'd536870912;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inputSignal_TDATA;
input   inputSignal_TVALID;
output   inputSignal_TREADY;
input  [3:0] inputSignal_TKEEP;
input  [3:0] inputSignal_TSTRB;
input  [1:0] inputSignal_TUSER;
input  [0:0] inputSignal_TLAST;
input  [4:0] inputSignal_TID;
input  [5:0] inputSignal_TDEST;
output  [31:0] outputPrediction_TDATA;
output   outputPrediction_TVALID;
input   outputPrediction_TREADY;
output  [3:0] outputPrediction_TKEEP;
output  [3:0] outputPrediction_TSTRB;
output  [1:0] outputPrediction_TUSER;
output  [0:0] outputPrediction_TLAST;
output  [4:0] outputPrediction_TID;
output  [5:0] outputPrediction_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_CS_fsm_pp0_stage29;
wire    inputStream_V_data_V_0_vld_out;
reg    ap_block_state30_pp0_stage29_iter0;
reg    ap_block_pp0_stage29_11001;
reg   [31:0] inputStream_V_data_V_0_data_out;
wire    inputStream_V_data_V_0_vld_in;
wire    inputStream_V_data_V_0_ack_in;
reg    inputStream_V_data_V_0_ack_out;
reg   [31:0] inputStream_V_data_V_0_payload_A;
reg   [31:0] inputStream_V_data_V_0_payload_B;
reg    inputStream_V_data_V_0_sel_rd;
reg    inputStream_V_data_V_0_sel_wr;
wire    inputStream_V_data_V_0_sel;
wire    inputStream_V_data_V_0_load_A;
wire    inputStream_V_data_V_0_load_B;
reg   [1:0] inputStream_V_data_V_0_state;
wire    inputStream_V_data_V_0_state_cmp_full;
wire    inputStream_V_dest_V_0_vld_in;
reg    inputStream_V_dest_V_0_ack_out;
reg   [1:0] inputStream_V_dest_V_0_state;
reg   [31:0] outputStream_V_data_V_1_data_in;
reg   [31:0] outputStream_V_data_V_1_data_out;
reg    outputStream_V_data_V_1_vld_in;
wire    outputStream_V_data_V_1_vld_out;
wire    outputStream_V_data_V_1_ack_in;
wire    outputStream_V_data_V_1_ack_out;
reg   [31:0] outputStream_V_data_V_1_payload_A;
reg   [31:0] outputStream_V_data_V_1_payload_B;
reg    outputStream_V_data_V_1_sel_rd;
reg    outputStream_V_data_V_1_sel_wr;
wire    outputStream_V_data_V_1_sel;
wire    outputStream_V_data_V_1_load_A;
wire    outputStream_V_data_V_1_load_B;
reg   [1:0] outputStream_V_data_V_1_state;
wire    outputStream_V_data_V_1_state_cmp_full;
wire   [3:0] outputStream_V_keep_V_1_data_out;
reg    outputStream_V_keep_V_1_vld_in;
wire    outputStream_V_keep_V_1_vld_out;
wire    outputStream_V_keep_V_1_ack_out;
reg    outputStream_V_keep_V_1_sel_rd;
wire    outputStream_V_keep_V_1_sel;
reg   [1:0] outputStream_V_keep_V_1_state;
wire   [3:0] outputStream_V_strb_V_1_data_out;
reg    outputStream_V_strb_V_1_vld_in;
wire    outputStream_V_strb_V_1_vld_out;
wire    outputStream_V_strb_V_1_ack_out;
reg    outputStream_V_strb_V_1_sel_rd;
wire    outputStream_V_strb_V_1_sel;
reg   [1:0] outputStream_V_strb_V_1_state;
wire   [1:0] outputStream_V_user_V_1_data_out;
reg    outputStream_V_user_V_1_vld_in;
wire    outputStream_V_user_V_1_vld_out;
wire    outputStream_V_user_V_1_ack_out;
reg    outputStream_V_user_V_1_sel_rd;
wire    outputStream_V_user_V_1_sel;
reg   [1:0] outputStream_V_user_V_1_state;
reg   [0:0] outputStream_V_last_V_1_data_in;
reg   [0:0] outputStream_V_last_V_1_data_out;
reg    outputStream_V_last_V_1_vld_in;
wire    outputStream_V_last_V_1_vld_out;
wire    outputStream_V_last_V_1_ack_in;
wire    outputStream_V_last_V_1_ack_out;
reg   [0:0] outputStream_V_last_V_1_payload_A;
reg   [0:0] outputStream_V_last_V_1_payload_B;
reg    outputStream_V_last_V_1_sel_rd;
reg    outputStream_V_last_V_1_sel_wr;
wire    outputStream_V_last_V_1_sel;
wire    outputStream_V_last_V_1_load_A;
wire    outputStream_V_last_V_1_load_B;
reg   [1:0] outputStream_V_last_V_1_state;
wire    outputStream_V_last_V_1_state_cmp_full;
wire   [4:0] outputStream_V_id_V_1_data_out;
reg    outputStream_V_id_V_1_vld_in;
wire    outputStream_V_id_V_1_vld_out;
wire    outputStream_V_id_V_1_ack_out;
reg    outputStream_V_id_V_1_sel_rd;
wire    outputStream_V_id_V_1_sel;
reg   [1:0] outputStream_V_id_V_1_state;
wire   [5:0] outputStream_V_dest_V_1_data_out;
reg    outputStream_V_dest_V_1_vld_in;
wire    outputStream_V_dest_V_1_vld_out;
wire    outputStream_V_dest_V_1_ack_out;
reg    outputStream_V_dest_V_1_sel_rd;
wire    outputStream_V_dest_V_1_sel;
reg   [1:0] outputStream_V_dest_V_1_state;
reg    inputSignal_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_pp0_stage17;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_pp0_stage18;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_pp0_stage19;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_pp0_stage20;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_pp0_stage22;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_pp0_stage23;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_pp0_stage24;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_pp0_stage25;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_pp0_stage26;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_pp0_stage27;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_block_pp0_stage28;
wire    ap_block_pp0_stage29;
reg    outputPrediction_TDATA_blk_n;
wire   [14:0] trunc_ln731_fu_169_p1;
reg   [14:0] trunc_ln731_reg_798;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state31_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [14:0] trunc_ln731_1_fu_173_p1;
reg   [14:0] trunc_ln731_1_reg_803;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state32_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [14:0] trunc_ln731_2_fu_177_p1;
reg   [14:0] trunc_ln731_2_reg_808;
reg    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state33_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [14:0] trunc_ln731_3_fu_181_p1;
reg   [14:0] trunc_ln731_3_reg_813;
reg    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state34_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
wire   [14:0] trunc_ln731_4_fu_185_p1;
reg   [14:0] trunc_ln731_4_reg_818;
reg    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state35_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
wire   [14:0] trunc_ln731_5_fu_189_p1;
reg   [14:0] trunc_ln731_5_reg_823;
reg    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_state36_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
wire   [14:0] trunc_ln731_6_fu_193_p1;
reg   [14:0] trunc_ln731_6_reg_828;
reg    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_state37_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
wire   [14:0] trunc_ln731_7_fu_197_p1;
reg   [14:0] trunc_ln731_7_reg_833;
reg    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_state38_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
wire   [14:0] trunc_ln731_8_fu_201_p1;
reg   [14:0] trunc_ln731_8_reg_838;
reg    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_state39_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_11001;
wire   [14:0] trunc_ln731_9_fu_205_p1;
reg   [14:0] trunc_ln731_9_reg_843;
reg    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_state40_pp0_stage9_iter1;
reg    ap_block_pp0_stage9_11001;
wire   [14:0] trunc_ln731_10_fu_209_p1;
reg   [14:0] trunc_ln731_10_reg_848;
reg    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_state41_pp0_stage10_iter1;
reg    ap_block_pp0_stage10_11001;
wire   [14:0] trunc_ln731_11_fu_213_p1;
reg   [14:0] trunc_ln731_11_reg_853;
reg    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_state42_pp0_stage11_iter1;
reg    ap_block_pp0_stage11_11001;
wire   [14:0] trunc_ln731_12_fu_217_p1;
reg   [14:0] trunc_ln731_12_reg_858;
reg    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_state43_pp0_stage12_iter1;
reg    ap_block_pp0_stage12_11001;
wire   [14:0] trunc_ln731_13_fu_221_p1;
reg   [14:0] trunc_ln731_13_reg_863;
reg    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_state44_pp0_stage13_iter1;
reg    ap_block_pp0_stage13_11001;
wire   [14:0] trunc_ln731_14_fu_225_p1;
reg   [14:0] trunc_ln731_14_reg_868;
reg    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_state45_pp0_stage14_iter1;
reg    ap_block_pp0_stage14_11001;
wire   [14:0] trunc_ln731_15_fu_229_p1;
reg   [14:0] trunc_ln731_15_reg_873;
reg    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_state46_pp0_stage15_iter1;
reg    ap_block_pp0_stage15_11001;
wire   [14:0] trunc_ln731_16_fu_233_p1;
reg   [14:0] trunc_ln731_16_reg_878;
reg    ap_block_state17_pp0_stage16_iter0;
reg    ap_block_state47_pp0_stage16_iter1;
reg    ap_block_pp0_stage16_11001;
wire   [14:0] trunc_ln731_17_fu_237_p1;
reg   [14:0] trunc_ln731_17_reg_883;
reg    ap_block_state18_pp0_stage17_iter0;
reg    ap_block_pp0_stage17_11001;
wire   [14:0] trunc_ln731_18_fu_241_p1;
reg   [14:0] trunc_ln731_18_reg_888;
reg    ap_block_state19_pp0_stage18_iter0;
reg    ap_block_pp0_stage18_11001;
wire   [14:0] trunc_ln731_19_fu_245_p1;
reg   [14:0] trunc_ln731_19_reg_893;
reg    ap_block_state20_pp0_stage19_iter0;
reg    ap_block_pp0_stage19_11001;
wire   [14:0] trunc_ln731_20_fu_249_p1;
reg   [14:0] trunc_ln731_20_reg_898;
reg    ap_block_state21_pp0_stage20_iter0;
reg    ap_block_pp0_stage20_11001;
wire   [14:0] trunc_ln731_21_fu_253_p1;
reg   [14:0] trunc_ln731_21_reg_903;
reg    ap_block_state22_pp0_stage21_iter0;
reg    ap_block_pp0_stage21_11001;
wire   [14:0] trunc_ln731_22_fu_257_p1;
reg   [14:0] trunc_ln731_22_reg_908;
reg    ap_block_state23_pp0_stage22_iter0;
reg    ap_block_pp0_stage22_11001;
wire   [14:0] trunc_ln731_23_fu_261_p1;
reg   [14:0] trunc_ln731_23_reg_913;
reg    ap_block_state24_pp0_stage23_iter0;
reg    ap_block_pp0_stage23_11001;
wire   [14:0] trunc_ln731_24_fu_265_p1;
reg   [14:0] trunc_ln731_24_reg_918;
reg    ap_block_state25_pp0_stage24_iter0;
reg    ap_block_pp0_stage24_11001;
wire   [14:0] trunc_ln731_25_fu_269_p1;
reg   [14:0] trunc_ln731_25_reg_923;
reg    ap_block_state26_pp0_stage25_iter0;
reg    ap_block_pp0_stage25_11001;
wire   [14:0] trunc_ln731_26_fu_273_p1;
reg   [14:0] trunc_ln731_26_reg_928;
reg    ap_block_state27_pp0_stage26_iter0;
reg    ap_block_pp0_stage26_11001;
wire   [14:0] trunc_ln731_27_fu_277_p1;
reg   [14:0] trunc_ln731_27_reg_933;
reg    ap_block_state28_pp0_stage27_iter0;
reg    ap_block_pp0_stage27_11001;
wire   [14:0] trunc_ln731_28_fu_281_p1;
reg   [14:0] trunc_ln731_28_reg_938;
reg    ap_block_state29_pp0_stage28_iter0;
reg    ap_block_pp0_stage28_11001;
wire   [6:0] empty_43_fu_389_p1;
reg   [6:0] empty_43_reg_948;
wire   [6:0] empty_44_fu_397_p1;
reg   [6:0] empty_44_reg_953;
wire   [6:0] empty_45_fu_405_p1;
reg   [6:0] empty_45_reg_958;
wire   [6:0] empty_46_fu_413_p1;
reg   [6:0] empty_46_reg_963;
wire   [6:0] empty_47_fu_421_p1;
reg   [6:0] empty_47_reg_968;
wire   [6:0] empty_48_fu_429_p1;
reg   [6:0] empty_48_reg_973;
wire   [6:0] empty_49_fu_437_p1;
reg   [6:0] empty_49_reg_978;
wire   [6:0] empty_50_fu_445_p1;
reg   [6:0] empty_50_reg_983;
wire   [6:0] empty_51_fu_453_p1;
reg   [6:0] empty_51_reg_988;
wire   [6:0] trunc_ln92_fu_461_p1;
reg   [6:0] trunc_ln92_reg_993;
wire   [0:0] icmp_ln1494_fu_465_p2;
reg   [0:0] icmp_ln1494_reg_998;
wire   [0:0] icmp_ln1494_1_fu_471_p2;
reg   [0:0] icmp_ln1494_1_reg_1003;
wire   [0:0] icmp_ln1494_2_fu_477_p2;
reg   [0:0] icmp_ln1494_2_reg_1008;
wire   [0:0] icmp_ln1494_3_fu_483_p2;
reg   [0:0] icmp_ln1494_3_reg_1013;
wire   [0:0] icmp_ln1494_4_fu_489_p2;
reg   [0:0] icmp_ln1494_4_reg_1018;
wire   [0:0] icmp_ln1494_5_fu_495_p2;
reg   [0:0] icmp_ln1494_5_reg_1023;
wire   [0:0] icmp_ln1494_6_fu_501_p2;
reg   [0:0] icmp_ln1494_6_reg_1028;
wire   [0:0] icmp_ln1494_7_fu_507_p2;
reg   [0:0] icmp_ln1494_7_reg_1033;
wire   [0:0] icmp_ln1494_8_fu_513_p2;
reg   [0:0] icmp_ln1494_8_reg_1038;
wire   [0:0] icmp_ln1494_9_fu_519_p2;
reg   [0:0] icmp_ln1494_9_reg_1043;
wire   [6:0] layer4_out_2_V_fu_525_p3;
reg   [6:0] layer4_out_2_V_reg_1048;
wire   [6:0] layer4_out_4_V_fu_531_p3;
reg   [6:0] layer4_out_4_V_reg_1053;
wire   [6:0] layer4_out_5_V_fu_537_p3;
reg   [6:0] layer4_out_5_V_reg_1058;
wire   [6:0] layer4_out_6_V_fu_543_p3;
reg   [6:0] layer4_out_6_V_reg_1063;
wire   [6:0] layer4_out_7_V_fu_549_p3;
reg   [6:0] layer4_out_7_V_reg_1068;
wire   [6:0] layer4_out_8_V_fu_555_p3;
reg   [6:0] layer4_out_8_V_reg_1073;
wire   [6:0] layer4_out_10_V_fu_561_p3;
reg   [6:0] layer4_out_10_V_reg_1078;
wire   [6:0] layer4_out_12_V_fu_567_p3;
reg   [6:0] layer4_out_12_V_reg_1083;
wire   [6:0] layer4_out_13_V_fu_573_p3;
reg   [6:0] layer4_out_13_V_reg_1088;
wire   [6:0] layer4_out_14_V_fu_579_p3;
reg   [6:0] layer4_out_14_V_reg_1093;
reg   [7:0] layer6_out_0_V_reg_1098;
reg   [7:0] layer6_out_1_V_reg_1103;
reg   [7:0] layer6_out_2_V_reg_1108;
reg   [7:0] layer6_out_3_V_reg_1113;
reg   [1:0] p_Result_s_reg_1118;
wire   [5:0] trunc_ln851_fu_611_p1;
reg   [5:0] trunc_ln851_reg_1125;
reg   [1:0] p_Result_s_52_reg_1130;
wire   [5:0] trunc_ln851_1_fu_625_p1;
reg   [5:0] trunc_ln851_1_reg_1137;
reg   [1:0] p_Result_1_reg_1142;
wire   [5:0] trunc_ln851_2_fu_639_p1;
reg   [5:0] trunc_ln851_2_reg_1149;
reg   [1:0] p_Result_3_reg_1154;
wire   [5:0] trunc_ln851_3_fu_653_p1;
reg   [5:0] trunc_ln851_3_reg_1161;
wire  signed [31:0] tmp_data_V_34_fu_688_p1;
wire   [1:0] select_ln850_1_fu_717_p3;
reg   [1:0] select_ln850_1_reg_1171;
wire   [1:0] select_ln850_2_fu_748_p3;
reg   [1:0] select_ln850_2_reg_1176;
wire   [1:0] select_ln850_3_fu_779_p3;
reg   [1:0] select_ln850_3_reg_1181;
wire  signed [31:0] tmp_data_V_35_fu_786_p1;
wire  signed [31:0] tmp_data_V_36_fu_790_p1;
wire  signed [31:0] tmp_data_V_37_fu_794_p1;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage16_subdone;
reg    ap_block_pp0_stage29_subdone;
wire   [959:0] grp_dense_latency_0_0_0_1_fu_146_data_V_read;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_0;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_1;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_2;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_3;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_4;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_5;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_6;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_7;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_8;
wire   [7:0] grp_dense_latency_0_0_0_1_fu_146_ap_return_9;
reg    grp_dense_latency_0_0_0_1_fu_146_ap_ce;
reg    ap_block_state30_pp0_stage29_iter0_ignore_call110;
reg    ap_block_pp0_stage29_11001_ignoreCallOp139;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call110;
wire    ap_block_state31_pp0_stage0_iter1_ignore_call110;
reg    ap_block_pp0_stage0_11001_ignoreCallOp140;
reg    ap_block_state2_pp0_stage1_iter0_ignore_call110;
wire    ap_block_state32_pp0_stage1_iter1_ignore_call110;
reg    ap_block_pp0_stage1_11001_ignoreCallOp141;
reg    ap_block_state3_pp0_stage2_iter0_ignore_call110;
wire    ap_block_state33_pp0_stage2_iter1_ignore_call110;
reg    ap_block_pp0_stage2_11001_ignoreCallOp142;
reg    ap_block_state4_pp0_stage3_iter0_ignore_call110;
wire    ap_block_state34_pp0_stage3_iter1_ignore_call110;
reg    ap_block_pp0_stage3_11001_ignoreCallOp143;
reg    ap_block_state5_pp0_stage4_iter0_ignore_call110;
wire    ap_block_state35_pp0_stage4_iter1_ignore_call110;
reg    ap_block_pp0_stage4_11001_ignoreCallOp144;
reg    ap_block_state6_pp0_stage5_iter0_ignore_call110;
wire    ap_block_state36_pp0_stage5_iter1_ignore_call110;
reg    ap_block_pp0_stage5_11001_ignoreCallOp145;
reg    ap_block_state7_pp0_stage6_iter0_ignore_call110;
wire    ap_block_state37_pp0_stage6_iter1_ignore_call110;
reg    ap_block_pp0_stage6_11001_ignoreCallOp146;
wire   [7:0] grp_dense_latency_0_0_0_s_fu_151_ap_return_0;
wire   [7:0] grp_dense_latency_0_0_0_s_fu_151_ap_return_1;
wire   [7:0] grp_dense_latency_0_0_0_s_fu_151_ap_return_2;
wire   [7:0] grp_dense_latency_0_0_0_s_fu_151_ap_return_3;
reg    grp_dense_latency_0_0_0_s_fu_151_ap_ce;
reg    ap_block_state9_pp0_stage8_iter0_ignore_call151;
wire    ap_block_state39_pp0_stage8_iter1_ignore_call151;
reg    ap_block_pp0_stage8_11001_ignoreCallOp187;
reg    ap_block_state10_pp0_stage9_iter0_ignore_call151;
wire    ap_block_state40_pp0_stage9_iter1_ignore_call151;
reg    ap_block_pp0_stage9_11001_ignoreCallOp188;
reg    ap_block_state11_pp0_stage10_iter0_ignore_call151;
wire    ap_block_state41_pp0_stage10_iter1_ignore_call151;
reg    ap_block_pp0_stage10_11001_ignoreCallOp189;
reg    ap_block_state12_pp0_stage11_iter0_ignore_call151;
wire    ap_block_state42_pp0_stage11_iter1_ignore_call151;
reg    ap_block_pp0_stage11_11001_ignoreCallOp190;
reg    ap_block_pp0_stage12_01001;
reg    ap_block_pp0_stage13_01001;
reg    ap_block_pp0_stage14_01001;
reg    ap_block_pp0_stage15_01001;
wire   [14:0] trunc_ln731_29_fu_285_p1;
wire   [0:0] icmp_ln851_fu_664_p2;
wire   [1:0] add_ln700_fu_669_p2;
wire   [0:0] tmp_fu_657_p3;
wire   [1:0] select_ln851_fu_674_p3;
wire   [1:0] select_ln850_fu_681_p3;
wire   [0:0] icmp_ln851_1_fu_700_p2;
wire   [1:0] add_ln700_1_fu_705_p2;
wire   [0:0] tmp_1_fu_693_p3;
wire   [1:0] select_ln851_1_fu_710_p3;
wire   [0:0] icmp_ln851_2_fu_731_p2;
wire   [1:0] add_ln700_2_fu_736_p2;
wire   [0:0] tmp_2_fu_724_p3;
wire   [1:0] select_ln851_2_fu_741_p3;
wire   [0:0] icmp_ln851_3_fu_762_p2;
wire   [1:0] add_ln700_3_fu_767_p2;
wire   [0:0] tmp_3_fu_755_p3;
wire   [1:0] select_ln851_3_fu_772_p3;
reg   [29:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
reg    ap_block_pp0_stage15_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage17_subdone;
reg    ap_block_pp0_stage18_subdone;
reg    ap_block_pp0_stage19_subdone;
reg    ap_block_pp0_stage20_subdone;
reg    ap_block_pp0_stage21_subdone;
reg    ap_block_pp0_stage22_subdone;
reg    ap_block_pp0_stage23_subdone;
reg    ap_block_pp0_stage24_subdone;
reg    ap_block_pp0_stage25_subdone;
reg    ap_block_pp0_stage26_subdone;
reg    ap_block_pp0_stage27_subdone;
reg    ap_block_pp0_stage28_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 inputStream_V_data_V_0_sel_rd = 1'b0;
#0 inputStream_V_data_V_0_sel_wr = 1'b0;
#0 inputStream_V_data_V_0_state = 2'd0;
#0 inputStream_V_dest_V_0_state = 2'd0;
#0 outputStream_V_data_V_1_sel_rd = 1'b0;
#0 outputStream_V_data_V_1_sel_wr = 1'b0;
#0 outputStream_V_data_V_1_state = 2'd0;
#0 outputStream_V_keep_V_1_sel_rd = 1'b0;
#0 outputStream_V_keep_V_1_state = 2'd0;
#0 outputStream_V_strb_V_1_sel_rd = 1'b0;
#0 outputStream_V_strb_V_1_state = 2'd0;
#0 outputStream_V_user_V_1_sel_rd = 1'b0;
#0 outputStream_V_user_V_1_state = 2'd0;
#0 outputStream_V_last_V_1_sel_rd = 1'b0;
#0 outputStream_V_last_V_1_sel_wr = 1'b0;
#0 outputStream_V_last_V_1_state = 2'd0;
#0 outputStream_V_id_V_1_sel_rd = 1'b0;
#0 outputStream_V_id_V_1_state = 2'd0;
#0 outputStream_V_dest_V_1_sel_rd = 1'b0;
#0 outputStream_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

myproject_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
myproject_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

dense_latency_0_0_0_1 grp_dense_latency_0_0_0_1_fu_146(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_V_read(grp_dense_latency_0_0_0_1_fu_146_data_V_read),
    .ap_return_0(grp_dense_latency_0_0_0_1_fu_146_ap_return_0),
    .ap_return_1(grp_dense_latency_0_0_0_1_fu_146_ap_return_1),
    .ap_return_2(grp_dense_latency_0_0_0_1_fu_146_ap_return_2),
    .ap_return_3(grp_dense_latency_0_0_0_1_fu_146_ap_return_3),
    .ap_return_4(grp_dense_latency_0_0_0_1_fu_146_ap_return_4),
    .ap_return_5(grp_dense_latency_0_0_0_1_fu_146_ap_return_5),
    .ap_return_6(grp_dense_latency_0_0_0_1_fu_146_ap_return_6),
    .ap_return_7(grp_dense_latency_0_0_0_1_fu_146_ap_return_7),
    .ap_return_8(grp_dense_latency_0_0_0_1_fu_146_ap_return_8),
    .ap_return_9(grp_dense_latency_0_0_0_1_fu_146_ap_return_9),
    .ap_ce(grp_dense_latency_0_0_0_1_fu_146_ap_ce)
);

dense_latency_0_0_0_s grp_dense_latency_0_0_0_s_fu_151(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_2_V_read(layer4_out_2_V_reg_1048),
    .data_4_V_read(layer4_out_4_V_reg_1053),
    .data_5_V_read(layer4_out_5_V_reg_1058),
    .data_6_V_read(layer4_out_6_V_reg_1063),
    .data_7_V_read(layer4_out_7_V_reg_1068),
    .data_8_V_read(layer4_out_8_V_reg_1073),
    .data_10_V_read(layer4_out_10_V_reg_1078),
    .data_12_V_read(layer4_out_12_V_reg_1083),
    .data_13_V_read(layer4_out_13_V_reg_1088),
    .data_14_V_read(layer4_out_14_V_reg_1093),
    .ap_return_0(grp_dense_latency_0_0_0_s_fu_151_ap_return_0),
    .ap_return_1(grp_dense_latency_0_0_0_s_fu_151_ap_return_1),
    .ap_return_2(grp_dense_latency_0_0_0_s_fu_151_ap_return_2),
    .ap_return_3(grp_dense_latency_0_0_0_s_fu_151_ap_return_3),
    .ap_ce(grp_dense_latency_0_0_0_s_fu_151_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage29) & (1'b0 == ap_block_pp0_stage29_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inputStream_V_data_V_0_ack_out == 1'b1) & (inputStream_V_data_V_0_vld_out == 1'b1))) begin
            inputStream_V_data_V_0_sel_rd <= ~inputStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inputStream_V_data_V_0_ack_in == 1'b1) & (inputStream_V_data_V_0_vld_in == 1'b1))) begin
            inputStream_V_data_V_0_sel_wr <= ~inputStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inputStream_V_data_V_0_state == 2'd2) & (inputStream_V_data_V_0_vld_in == 1'b0)) | ((inputStream_V_data_V_0_state == 2'd3) & (inputStream_V_data_V_0_vld_in == 1'b0) & (inputStream_V_data_V_0_ack_out == 1'b1)))) begin
            inputStream_V_data_V_0_state <= 2'd2;
        end else if ((((inputStream_V_data_V_0_state == 2'd1) & (inputStream_V_data_V_0_ack_out == 1'b0)) | ((inputStream_V_data_V_0_state == 2'd3) & (inputStream_V_data_V_0_ack_out == 1'b0) & (inputStream_V_data_V_0_vld_in == 1'b1)))) begin
            inputStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inputStream_V_data_V_0_vld_in == 1'b0) & (inputStream_V_data_V_0_ack_out == 1'b1)) & ~((inputStream_V_data_V_0_ack_out == 1'b0) & (inputStream_V_data_V_0_vld_in == 1'b1)) & (inputStream_V_data_V_0_state == 2'd3)) | ((inputStream_V_data_V_0_state == 2'd1) & (inputStream_V_data_V_0_ack_out == 1'b1)) | ((inputStream_V_data_V_0_state == 2'd2) & (inputStream_V_data_V_0_vld_in == 1'b1)))) begin
            inputStream_V_data_V_0_state <= 2'd3;
        end else begin
            inputStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inputStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inputStream_V_dest_V_0_vld_in == 1'b0) & (inputStream_V_dest_V_0_state == 2'd2)) | ((inputStream_V_dest_V_0_vld_in == 1'b0) & (inputStream_V_dest_V_0_ack_out == 1'b1) & (inputStream_V_dest_V_0_state == 2'd3)))) begin
            inputStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inputStream_V_dest_V_0_ack_out == 1'b0) & (inputStream_V_dest_V_0_state == 2'd1)) | ((inputStream_V_dest_V_0_ack_out == 1'b0) & (inputStream_V_dest_V_0_vld_in == 1'b1) & (inputStream_V_dest_V_0_state == 2'd3)))) begin
            inputStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inputStream_V_dest_V_0_vld_in == 1'b0) & (inputStream_V_dest_V_0_ack_out == 1'b1)) & ~((inputStream_V_dest_V_0_ack_out == 1'b0) & (inputStream_V_dest_V_0_vld_in == 1'b1)) & (inputStream_V_dest_V_0_state == 2'd3)) | ((inputStream_V_dest_V_0_ack_out == 1'b1) & (inputStream_V_dest_V_0_state == 2'd1)) | ((inputStream_V_dest_V_0_vld_in == 1'b1) & (inputStream_V_dest_V_0_state == 2'd2)))) begin
            inputStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inputStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_data_V_1_ack_out == 1'b1) & (outputStream_V_data_V_1_vld_out == 1'b1))) begin
            outputStream_V_data_V_1_sel_rd <= ~outputStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outputStream_V_data_V_1_ack_in == 1'b1) & (outputStream_V_data_V_1_vld_in == 1'b1))) begin
            outputStream_V_data_V_1_sel_wr <= ~outputStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_data_V_1_vld_in == 1'b0) & (outputStream_V_data_V_1_state == 2'd2)) | ((outputStream_V_data_V_1_vld_in == 1'b0) & (outputStream_V_data_V_1_ack_out == 1'b1) & (outputStream_V_data_V_1_state == 2'd3)))) begin
            outputStream_V_data_V_1_state <= 2'd2;
        end else if ((((outputPrediction_TREADY == 1'b0) & (outputStream_V_data_V_1_state == 2'd1)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_data_V_1_vld_in == 1'b1) & (outputStream_V_data_V_1_state == 2'd3)))) begin
            outputStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_data_V_1_vld_in == 1'b0) & (outputStream_V_data_V_1_ack_out == 1'b1)) & ~((outputPrediction_TREADY == 1'b0) & (outputStream_V_data_V_1_vld_in == 1'b1)) & (outputStream_V_data_V_1_state == 2'd3)) | ((outputStream_V_data_V_1_ack_out == 1'b1) & (outputStream_V_data_V_1_state == 2'd1)) | ((outputStream_V_data_V_1_vld_in == 1'b1) & (outputStream_V_data_V_1_state == 2'd2)))) begin
            outputStream_V_data_V_1_state <= 2'd3;
        end else begin
            outputStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_dest_V_1_ack_out == 1'b1) & (outputStream_V_dest_V_1_vld_out == 1'b1))) begin
            outputStream_V_dest_V_1_sel_rd <= ~outputStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_dest_V_1_vld_in == 1'b0) & (outputStream_V_dest_V_1_state == 2'd2)) | ((outputStream_V_dest_V_1_vld_in == 1'b0) & (outputStream_V_dest_V_1_ack_out == 1'b1) & (outputStream_V_dest_V_1_state == 2'd3)))) begin
            outputStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outputPrediction_TREADY == 1'b0) & (outputStream_V_dest_V_1_state == 2'd1)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_dest_V_1_vld_in == 1'b1) & (outputStream_V_dest_V_1_state == 2'd3)))) begin
            outputStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_dest_V_1_vld_in == 1'b0) & (outputStream_V_dest_V_1_ack_out == 1'b1)) & ~((outputPrediction_TREADY == 1'b0) & (outputStream_V_dest_V_1_vld_in == 1'b1)) & (outputStream_V_dest_V_1_state == 2'd3)) | ((outputStream_V_dest_V_1_ack_out == 1'b1) & (outputStream_V_dest_V_1_state == 2'd1)) | ((outputStream_V_dest_V_1_vld_in == 1'b1) & (outputStream_V_dest_V_1_state == 2'd2)))) begin
            outputStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outputStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_id_V_1_ack_out == 1'b1) & (outputStream_V_id_V_1_vld_out == 1'b1))) begin
            outputStream_V_id_V_1_sel_rd <= ~outputStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_id_V_1_vld_in == 1'b0) & (outputStream_V_id_V_1_state == 2'd2)) | ((outputStream_V_id_V_1_vld_in == 1'b0) & (outputStream_V_id_V_1_ack_out == 1'b1) & (outputStream_V_id_V_1_state == 2'd3)))) begin
            outputStream_V_id_V_1_state <= 2'd2;
        end else if ((((outputPrediction_TREADY == 1'b0) & (outputStream_V_id_V_1_state == 2'd1)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_id_V_1_vld_in == 1'b1) & (outputStream_V_id_V_1_state == 2'd3)))) begin
            outputStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_id_V_1_vld_in == 1'b0) & (outputStream_V_id_V_1_ack_out == 1'b1)) & ~((outputPrediction_TREADY == 1'b0) & (outputStream_V_id_V_1_vld_in == 1'b1)) & (outputStream_V_id_V_1_state == 2'd3)) | ((outputStream_V_id_V_1_ack_out == 1'b1) & (outputStream_V_id_V_1_state == 2'd1)) | ((outputStream_V_id_V_1_vld_in == 1'b1) & (outputStream_V_id_V_1_state == 2'd2)))) begin
            outputStream_V_id_V_1_state <= 2'd3;
        end else begin
            outputStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_keep_V_1_ack_out == 1'b1) & (outputStream_V_keep_V_1_vld_out == 1'b1))) begin
            outputStream_V_keep_V_1_sel_rd <= ~outputStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_keep_V_1_vld_in == 1'b0) & (outputStream_V_keep_V_1_state == 2'd2)) | ((outputStream_V_keep_V_1_vld_in == 1'b0) & (outputStream_V_keep_V_1_ack_out == 1'b1) & (outputStream_V_keep_V_1_state == 2'd3)))) begin
            outputStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outputPrediction_TREADY == 1'b0) & (outputStream_V_keep_V_1_state == 2'd1)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_keep_V_1_vld_in == 1'b1) & (outputStream_V_keep_V_1_state == 2'd3)))) begin
            outputStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_keep_V_1_vld_in == 1'b0) & (outputStream_V_keep_V_1_ack_out == 1'b1)) & ~((outputPrediction_TREADY == 1'b0) & (outputStream_V_keep_V_1_vld_in == 1'b1)) & (outputStream_V_keep_V_1_state == 2'd3)) | ((outputStream_V_keep_V_1_ack_out == 1'b1) & (outputStream_V_keep_V_1_state == 2'd1)) | ((outputStream_V_keep_V_1_vld_in == 1'b1) & (outputStream_V_keep_V_1_state == 2'd2)))) begin
            outputStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outputStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_last_V_1_ack_out == 1'b1) & (outputStream_V_last_V_1_vld_out == 1'b1))) begin
            outputStream_V_last_V_1_sel_rd <= ~outputStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outputStream_V_last_V_1_ack_in == 1'b1) & (outputStream_V_last_V_1_vld_in == 1'b1))) begin
            outputStream_V_last_V_1_sel_wr <= ~outputStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_last_V_1_vld_in == 1'b0) & (outputStream_V_last_V_1_state == 2'd2)) | ((outputStream_V_last_V_1_vld_in == 1'b0) & (outputStream_V_last_V_1_ack_out == 1'b1) & (outputStream_V_last_V_1_state == 2'd3)))) begin
            outputStream_V_last_V_1_state <= 2'd2;
        end else if ((((outputPrediction_TREADY == 1'b0) & (outputStream_V_last_V_1_state == 2'd1)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_last_V_1_vld_in == 1'b1) & (outputStream_V_last_V_1_state == 2'd3)))) begin
            outputStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_last_V_1_vld_in == 1'b0) & (outputStream_V_last_V_1_ack_out == 1'b1)) & ~((outputPrediction_TREADY == 1'b0) & (outputStream_V_last_V_1_vld_in == 1'b1)) & (outputStream_V_last_V_1_state == 2'd3)) | ((outputStream_V_last_V_1_ack_out == 1'b1) & (outputStream_V_last_V_1_state == 2'd1)) | ((outputStream_V_last_V_1_vld_in == 1'b1) & (outputStream_V_last_V_1_state == 2'd2)))) begin
            outputStream_V_last_V_1_state <= 2'd3;
        end else begin
            outputStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_strb_V_1_ack_out == 1'b1) & (outputStream_V_strb_V_1_vld_out == 1'b1))) begin
            outputStream_V_strb_V_1_sel_rd <= ~outputStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_strb_V_1_vld_in == 1'b0) & (outputStream_V_strb_V_1_state == 2'd2)) | ((outputStream_V_strb_V_1_vld_in == 1'b0) & (outputStream_V_strb_V_1_ack_out == 1'b1) & (outputStream_V_strb_V_1_state == 2'd3)))) begin
            outputStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outputPrediction_TREADY == 1'b0) & (outputStream_V_strb_V_1_state == 2'd1)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_strb_V_1_vld_in == 1'b1) & (outputStream_V_strb_V_1_state == 2'd3)))) begin
            outputStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_strb_V_1_vld_in == 1'b0) & (outputStream_V_strb_V_1_ack_out == 1'b1)) & ~((outputPrediction_TREADY == 1'b0) & (outputStream_V_strb_V_1_vld_in == 1'b1)) & (outputStream_V_strb_V_1_state == 2'd3)) | ((outputStream_V_strb_V_1_ack_out == 1'b1) & (outputStream_V_strb_V_1_state == 2'd1)) | ((outputStream_V_strb_V_1_vld_in == 1'b1) & (outputStream_V_strb_V_1_state == 2'd2)))) begin
            outputStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outputStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_user_V_1_ack_out == 1'b1) & (outputStream_V_user_V_1_vld_out == 1'b1))) begin
            outputStream_V_user_V_1_sel_rd <= ~outputStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_user_V_1_vld_in == 1'b0) & (outputStream_V_user_V_1_state == 2'd2)) | ((outputStream_V_user_V_1_vld_in == 1'b0) & (outputStream_V_user_V_1_ack_out == 1'b1) & (outputStream_V_user_V_1_state == 2'd3)))) begin
            outputStream_V_user_V_1_state <= 2'd2;
        end else if ((((outputPrediction_TREADY == 1'b0) & (outputStream_V_user_V_1_state == 2'd1)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_user_V_1_vld_in == 1'b1) & (outputStream_V_user_V_1_state == 2'd3)))) begin
            outputStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_user_V_1_vld_in == 1'b0) & (outputStream_V_user_V_1_ack_out == 1'b1)) & ~((outputPrediction_TREADY == 1'b0) & (outputStream_V_user_V_1_vld_in == 1'b1)) & (outputStream_V_user_V_1_state == 2'd3)) | ((outputStream_V_user_V_1_ack_out == 1'b1) & (outputStream_V_user_V_1_state == 2'd1)) | ((outputStream_V_user_V_1_vld_in == 1'b1) & (outputStream_V_user_V_1_state == 2'd2)))) begin
            outputStream_V_user_V_1_state <= 2'd3;
        end else begin
            outputStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        empty_43_reg_948 <= empty_43_fu_389_p1;
        empty_44_reg_953 <= empty_44_fu_397_p1;
        empty_45_reg_958 <= empty_45_fu_405_p1;
        empty_46_reg_963 <= empty_46_fu_413_p1;
        empty_47_reg_968 <= empty_47_fu_421_p1;
        empty_48_reg_973 <= empty_48_fu_429_p1;
        empty_49_reg_978 <= empty_49_fu_437_p1;
        empty_50_reg_983 <= empty_50_fu_445_p1;
        empty_51_reg_988 <= empty_51_fu_453_p1;
        icmp_ln1494_1_reg_1003 <= icmp_ln1494_1_fu_471_p2;
        icmp_ln1494_2_reg_1008 <= icmp_ln1494_2_fu_477_p2;
        icmp_ln1494_3_reg_1013 <= icmp_ln1494_3_fu_483_p2;
        icmp_ln1494_4_reg_1018 <= icmp_ln1494_4_fu_489_p2;
        icmp_ln1494_5_reg_1023 <= icmp_ln1494_5_fu_495_p2;
        icmp_ln1494_6_reg_1028 <= icmp_ln1494_6_fu_501_p2;
        icmp_ln1494_7_reg_1033 <= icmp_ln1494_7_fu_507_p2;
        icmp_ln1494_8_reg_1038 <= icmp_ln1494_8_fu_513_p2;
        icmp_ln1494_9_reg_1043 <= icmp_ln1494_9_fu_519_p2;
        icmp_ln1494_reg_998 <= icmp_ln1494_fu_465_p2;
        trunc_ln731_6_reg_828 <= trunc_ln731_6_fu_193_p1;
        trunc_ln92_reg_993 <= trunc_ln92_fu_461_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((inputStream_V_data_V_0_load_A == 1'b1)) begin
        inputStream_V_data_V_0_payload_A <= inputSignal_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inputStream_V_data_V_0_load_B == 1'b1)) begin
        inputStream_V_data_V_0_payload_B <= inputSignal_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        layer4_out_10_V_reg_1078 <= layer4_out_10_V_fu_561_p3;
        layer4_out_12_V_reg_1083 <= layer4_out_12_V_fu_567_p3;
        layer4_out_13_V_reg_1088 <= layer4_out_13_V_fu_573_p3;
        layer4_out_14_V_reg_1093 <= layer4_out_14_V_fu_579_p3;
        layer4_out_2_V_reg_1048 <= layer4_out_2_V_fu_525_p3;
        layer4_out_4_V_reg_1053 <= layer4_out_4_V_fu_531_p3;
        layer4_out_5_V_reg_1058 <= layer4_out_5_V_fu_537_p3;
        layer4_out_6_V_reg_1063 <= layer4_out_6_V_fu_543_p3;
        layer4_out_7_V_reg_1068 <= layer4_out_7_V_fu_549_p3;
        layer4_out_8_V_reg_1073 <= layer4_out_8_V_fu_555_p3;
        trunc_ln731_7_reg_833 <= trunc_ln731_7_fu_197_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        layer6_out_0_V_reg_1098 <= grp_dense_latency_0_0_0_s_fu_151_ap_return_0;
        layer6_out_1_V_reg_1103 <= grp_dense_latency_0_0_0_s_fu_151_ap_return_1;
        layer6_out_2_V_reg_1108 <= grp_dense_latency_0_0_0_s_fu_151_ap_return_2;
        layer6_out_3_V_reg_1113 <= grp_dense_latency_0_0_0_s_fu_151_ap_return_3;
        p_Result_1_reg_1142 <= {{grp_dense_latency_0_0_0_s_fu_151_ap_return_2[7:6]}};
        p_Result_3_reg_1154 <= {{grp_dense_latency_0_0_0_s_fu_151_ap_return_3[7:6]}};
        p_Result_s_52_reg_1130 <= {{grp_dense_latency_0_0_0_s_fu_151_ap_return_1[7:6]}};
        p_Result_s_reg_1118 <= {{grp_dense_latency_0_0_0_s_fu_151_ap_return_0[7:6]}};
        trunc_ln731_11_reg_853 <= trunc_ln731_11_fu_213_p1;
        trunc_ln851_1_reg_1137 <= trunc_ln851_1_fu_625_p1;
        trunc_ln851_2_reg_1149 <= trunc_ln851_2_fu_639_p1;
        trunc_ln851_3_reg_1161 <= trunc_ln851_3_fu_653_p1;
        trunc_ln851_reg_1125 <= trunc_ln851_fu_611_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_data_V_1_load_A == 1'b1)) begin
        outputStream_V_data_V_1_payload_A <= outputStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_data_V_1_load_B == 1'b1)) begin
        outputStream_V_data_V_1_payload_B <= outputStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_last_V_1_load_A == 1'b1)) begin
        outputStream_V_last_V_1_payload_A <= outputStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_last_V_1_load_B == 1'b1)) begin
        outputStream_V_last_V_1_payload_B <= outputStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001))) begin
        select_ln850_1_reg_1171 <= select_ln850_1_fu_717_p3;
        select_ln850_2_reg_1176 <= select_ln850_2_fu_748_p3;
        select_ln850_3_reg_1181 <= select_ln850_3_fu_779_p3;
        trunc_ln731_12_reg_858 <= trunc_ln731_12_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        trunc_ln731_10_reg_848 <= trunc_ln731_10_fu_209_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001))) begin
        trunc_ln731_13_reg_863 <= trunc_ln731_13_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        trunc_ln731_14_reg_868 <= trunc_ln731_14_fu_225_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001))) begin
        trunc_ln731_15_reg_873 <= trunc_ln731_15_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001))) begin
        trunc_ln731_16_reg_878 <= trunc_ln731_16_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        trunc_ln731_17_reg_883 <= trunc_ln731_17_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001))) begin
        trunc_ln731_18_reg_888 <= trunc_ln731_18_fu_241_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001))) begin
        trunc_ln731_19_reg_893 <= trunc_ln731_19_fu_245_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        trunc_ln731_1_reg_803 <= trunc_ln731_1_fu_173_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001))) begin
        trunc_ln731_20_reg_898 <= trunc_ln731_20_fu_249_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001))) begin
        trunc_ln731_21_reg_903 <= trunc_ln731_21_fu_253_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001))) begin
        trunc_ln731_22_reg_908 <= trunc_ln731_22_fu_257_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001))) begin
        trunc_ln731_23_reg_913 <= trunc_ln731_23_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001))) begin
        trunc_ln731_24_reg_918 <= trunc_ln731_24_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25_11001))) begin
        trunc_ln731_25_reg_923 <= trunc_ln731_25_fu_269_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001))) begin
        trunc_ln731_26_reg_928 <= trunc_ln731_26_fu_273_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27_11001))) begin
        trunc_ln731_27_reg_933 <= trunc_ln731_27_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28_11001))) begin
        trunc_ln731_28_reg_938 <= trunc_ln731_28_fu_281_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        trunc_ln731_2_reg_808 <= trunc_ln731_2_fu_177_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        trunc_ln731_3_reg_813 <= trunc_ln731_3_fu_181_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        trunc_ln731_4_reg_818 <= trunc_ln731_4_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        trunc_ln731_5_reg_823 <= trunc_ln731_5_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        trunc_ln731_8_reg_838 <= trunc_ln731_8_fu_201_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        trunc_ln731_9_reg_843 <= trunc_ln731_9_fu_205_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln731_reg_798 <= trunc_ln731_fu_169_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage29_11001) & (1'b1 == ap_CS_fsm_pp0_stage29) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001_ignoreCallOp146)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001_ignoreCallOp145)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_ignoreCallOp144)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001_ignoreCallOp143)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_ignoreCallOp142)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_ignoreCallOp141)) | ((1'b1 == ap_CS_fsm_pp0_stage29) & (1'b0 == ap_block_pp0_stage29_11001_ignoreCallOp139)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp140)))) begin
        grp_dense_latency_0_0_0_1_fu_146_ap_ce = 1'b1;
    end else begin
        grp_dense_latency_0_0_0_1_fu_146_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001_ignoreCallOp189)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001_ignoreCallOp188)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001_ignoreCallOp187)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001_ignoreCallOp190)))) begin
        grp_dense_latency_0_0_0_s_fu_151_ap_ce = 1'b1;
    end else begin
        grp_dense_latency_0_0_0_s_fu_151_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11)) | ((1'b1 == ap_CS_fsm_pp0_stage29) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        inputSignal_TDATA_blk_n = inputStream_V_data_V_0_state[1'd0];
    end else begin
        inputSignal_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b0 == ap_block_pp0_stage29_11001) & (1'b1 == ap_CS_fsm_pp0_stage29) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        inputStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inputStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inputStream_V_data_V_0_sel == 1'b1)) begin
        inputStream_V_data_V_0_data_out = inputStream_V_data_V_0_payload_B;
    end else begin
        inputStream_V_data_V_0_data_out = inputStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b0 == ap_block_pp0_stage29_11001) & (1'b1 == ap_CS_fsm_pp0_stage29) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        inputStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inputStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12)))) begin
        outputPrediction_TDATA_blk_n = outputStream_V_data_V_1_state[1'd1];
    end else begin
        outputPrediction_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_01001))) begin
            outputStream_V_data_V_1_data_in = tmp_data_V_37_fu_794_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_01001))) begin
            outputStream_V_data_V_1_data_in = tmp_data_V_36_fu_790_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_01001))) begin
            outputStream_V_data_V_1_data_in = tmp_data_V_35_fu_786_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_01001))) begin
            outputStream_V_data_V_1_data_in = tmp_data_V_34_fu_688_p1;
        end else begin
            outputStream_V_data_V_1_data_in = 'bx;
        end
    end else begin
        outputStream_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outputStream_V_data_V_1_sel == 1'b1)) begin
        outputStream_V_data_V_1_data_out = outputStream_V_data_V_1_payload_B;
    end else begin
        outputStream_V_data_V_1_data_out = outputStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        outputStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        outputStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        outputStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        outputStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_01001))) begin
        outputStream_V_last_V_1_data_in = 1'd1;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_01001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_01001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_01001)))) begin
        outputStream_V_last_V_1_data_in = 1'd0;
    end else begin
        outputStream_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outputStream_V_last_V_1_sel == 1'b1)) begin
        outputStream_V_last_V_1_data_out = outputStream_V_last_V_1_payload_B;
    end else begin
        outputStream_V_last_V_1_data_out = outputStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        outputStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        outputStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)))) begin
        outputStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_1_fu_705_p2 = (2'd1 + p_Result_s_52_reg_1130);

assign add_ln700_2_fu_736_p2 = (2'd1 + p_Result_1_reg_1142);

assign add_ln700_3_fu_767_p2 = (2'd1 + p_Result_3_reg_1154);

assign add_ln700_fu_669_p2 = (2'd1 + p_Result_s_reg_1118);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage29 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((inputStream_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp140 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((inputStream_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((inputStream_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage10_11001_ignoreCallOp189 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage11_11001_ignoreCallOp190 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_01001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage12_11001 = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((outputStream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((outputStream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_01001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage13_11001 = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((outputStream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((outputStream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_01001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage14_11001 = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((outputStream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((outputStream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_01001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage15_11001 = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((outputStream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((outputStream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage16_11001 = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((outputStream_V_data_V_1_ack_in == 1'b0) | (outputStream_V_dest_V_1_state == 2'd1) | (outputStream_V_id_V_1_state == 2'd1) | (outputStream_V_last_V_1_state == 2'd1) | (outputStream_V_user_V_1_state == 2'd1) | (outputStream_V_strb_V_1_state == 2'd1) | (outputStream_V_keep_V_1_state == 2'd1) | (outputStream_V_data_V_1_state == 2'd1) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_dest_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_id_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_last_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_user_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_strb_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_keep_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_data_V_1_state == 2'd3)))));
end

always @ (*) begin
    ap_block_pp0_stage16_subdone = (((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((outputStream_V_data_V_1_ack_in == 1'b0) | (outputStream_V_dest_V_1_state == 2'd1) | (outputStream_V_id_V_1_state == 2'd1) | (outputStream_V_last_V_1_state == 2'd1) | (outputStream_V_user_V_1_state == 2'd1) | (outputStream_V_strb_V_1_state == 2'd1) | (outputStream_V_keep_V_1_state == 2'd1) | (outputStream_V_data_V_1_state == 2'd1) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_dest_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_id_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_last_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_user_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_strb_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_keep_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_data_V_1_state == 2'd3)))));
end

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage17_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage17_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage18_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage18_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage19_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage19_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_ignoreCallOp141 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage20_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage20_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage21_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage21_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage22_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage22_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage23_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage23_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage24_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage24_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage25_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage25_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage26_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage26_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage27_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage27_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage28_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage28_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage29 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage29_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage29_11001_ignoreCallOp139 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage29_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001_ignoreCallOp142 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001_ignoreCallOp143 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001_ignoreCallOp144 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001_ignoreCallOp145 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_11001_ignoreCallOp146 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_11001_ignoreCallOp187 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_11001_ignoreCallOp188 = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((inputStream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0_ignore_call151 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0_ignore_call151 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage11_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage11_iter0_ignore_call151 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage12_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage13_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state15_pp0_stage14_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state16_pp0_stage15_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state17_pp0_stage16_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state18_pp0_stage17_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state19_pp0_stage18_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((inputStream_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call110 = ((inputStream_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state20_pp0_stage19_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state21_pp0_stage20_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state22_pp0_stage21_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state23_pp0_stage22_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state24_pp0_stage23_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state25_pp0_stage24_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state26_pp0_stage25_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state27_pp0_stage26_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state28_pp0_stage27_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state29_pp0_stage28_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0_ignore_call110 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state30_pp0_stage29_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state30_pp0_stage29_iter0_ignore_call110 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

assign ap_block_state31_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter1_ignore_call110 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter1_ignore_call110 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage2_iter1_ignore_call110 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage3_iter1_ignore_call110 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage4_iter1_ignore_call110 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage5_iter1_ignore_call110 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage6_iter1_ignore_call110 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage8_iter1_ignore_call151 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0_ignore_call110 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

assign ap_block_state40_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage9_iter1_ignore_call151 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage10_iter1_ignore_call151 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage11_iter1_ignore_call151 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage13_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage14_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage15_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state47_pp0_stage16_iter1 = ((outputStream_V_dest_V_1_state == 2'd1) | (outputStream_V_id_V_1_state == 2'd1) | (outputStream_V_last_V_1_state == 2'd1) | (outputStream_V_user_V_1_state == 2'd1) | (outputStream_V_strb_V_1_state == 2'd1) | (outputStream_V_keep_V_1_state == 2'd1) | (outputStream_V_data_V_1_state == 2'd1) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_dest_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_id_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_last_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_user_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_strb_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_keep_V_1_state == 2'd3)) | ((outputPrediction_TREADY == 1'b0) & (outputStream_V_data_V_1_state == 2'd3)));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0_ignore_call110 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0_ignore_call110 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0_ignore_call110 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0_ignore_call110 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0_ignore_call151 = (inputStream_V_data_V_0_vld_out == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_43_fu_389_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_0[6:0];

assign empty_44_fu_397_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_1[6:0];

assign empty_45_fu_405_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_2[6:0];

assign empty_46_fu_413_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_3[6:0];

assign empty_47_fu_421_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_4[6:0];

assign empty_48_fu_429_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_5[6:0];

assign empty_49_fu_437_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_6[6:0];

assign empty_50_fu_445_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_7[6:0];

assign empty_51_fu_453_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_8[6:0];

assign grp_dense_latency_0_0_0_1_fu_146_data_V_read = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln731_29_fu_285_p1}, {17'd0}}, {trunc_ln731_28_reg_938}}, {17'd0}}, {trunc_ln731_27_reg_933}}, {17'd0}}, {trunc_ln731_26_reg_928}}, {17'd0}}, {trunc_ln731_25_reg_923}}, {17'd0}}, {trunc_ln731_24_reg_918}}, {17'd0}}, {trunc_ln731_23_reg_913}}, {17'd0}}, {trunc_ln731_22_reg_908}}, {17'd0}}, {trunc_ln731_21_reg_903}}, {17'd0}}, {trunc_ln731_20_reg_898}}, {17'd0}}, {trunc_ln731_19_reg_893}}, {17'd0}}, {trunc_ln731_18_reg_888}}, {17'd0}}, {trunc_ln731_17_reg_883}}, {17'd0}}, {trunc_ln731_16_reg_878}}, {17'd0}}, {trunc_ln731_15_reg_873}}, {17'd0}}, {trunc_ln731_14_reg_868}}, {17'd0}}, {trunc_ln731_13_reg_863}}, {17'd0}}, {trunc_ln731_12_reg_858}}, {17'd0}}, {trunc_ln731_11_reg_853}}, {17'd0}}, {trunc_ln731_10_reg_848}}, {17'd0}}, {trunc_ln731_9_reg_843}}, {17'd0}}, {trunc_ln731_8_reg_838}}, {17'd0}}, {trunc_ln731_7_reg_833}}, {17'd0}}, {trunc_ln731_6_reg_828}}, {17'd0}}, {trunc_ln731_5_reg_823}}, {17'd0}}, {trunc_ln731_4_reg_818}}, {17'd0}}, {trunc_ln731_3_reg_813}}, {17'd0}}, {trunc_ln731_2_reg_808}}, {17'd0}}, {trunc_ln731_1_reg_803}}, {17'd0}}, {trunc_ln731_reg_798}}, {17'd0}};

assign icmp_ln1494_1_fu_471_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_1) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_477_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_2) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_483_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_3) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_489_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_495_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_5) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_501_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_6) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_507_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_7) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_513_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_8) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_519_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_9) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_465_p2 = (($signed(grp_dense_latency_0_0_0_1_fu_146_ap_return_0) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln851_1_fu_700_p2 = ((trunc_ln851_1_reg_1137 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_2_fu_731_p2 = ((trunc_ln851_2_reg_1149 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_3_fu_762_p2 = ((trunc_ln851_3_reg_1161 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_664_p2 = ((trunc_ln851_reg_1125 == 6'd0) ? 1'b1 : 1'b0);

assign inputSignal_TREADY = inputStream_V_dest_V_0_state[1'd1];

assign inputStream_V_data_V_0_ack_in = inputStream_V_data_V_0_state[1'd1];

assign inputStream_V_data_V_0_load_A = (inputStream_V_data_V_0_state_cmp_full & ~inputStream_V_data_V_0_sel_wr);

assign inputStream_V_data_V_0_load_B = (inputStream_V_data_V_0_state_cmp_full & inputStream_V_data_V_0_sel_wr);

assign inputStream_V_data_V_0_sel = inputStream_V_data_V_0_sel_rd;

assign inputStream_V_data_V_0_state_cmp_full = ((inputStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inputStream_V_data_V_0_vld_in = inputSignal_TVALID;

assign inputStream_V_data_V_0_vld_out = inputStream_V_data_V_0_state[1'd0];

assign inputStream_V_dest_V_0_vld_in = inputSignal_TVALID;

assign layer4_out_10_V_fu_561_p3 = ((icmp_ln1494_6_reg_1028[0:0] === 1'b1) ? empty_49_reg_978 : 7'd0);

assign layer4_out_12_V_fu_567_p3 = ((icmp_ln1494_7_reg_1033[0:0] === 1'b1) ? empty_50_reg_983 : 7'd0);

assign layer4_out_13_V_fu_573_p3 = ((icmp_ln1494_8_reg_1038[0:0] === 1'b1) ? empty_51_reg_988 : 7'd0);

assign layer4_out_14_V_fu_579_p3 = ((icmp_ln1494_9_reg_1043[0:0] === 1'b1) ? trunc_ln92_reg_993 : 7'd0);

assign layer4_out_2_V_fu_525_p3 = ((icmp_ln1494_reg_998[0:0] === 1'b1) ? empty_43_reg_948 : 7'd0);

assign layer4_out_4_V_fu_531_p3 = ((icmp_ln1494_1_reg_1003[0:0] === 1'b1) ? empty_44_reg_953 : 7'd0);

assign layer4_out_5_V_fu_537_p3 = ((icmp_ln1494_2_reg_1008[0:0] === 1'b1) ? empty_45_reg_958 : 7'd0);

assign layer4_out_6_V_fu_543_p3 = ((icmp_ln1494_3_reg_1013[0:0] === 1'b1) ? empty_46_reg_963 : 7'd0);

assign layer4_out_7_V_fu_549_p3 = ((icmp_ln1494_4_reg_1018[0:0] === 1'b1) ? empty_47_reg_968 : 7'd0);

assign layer4_out_8_V_fu_555_p3 = ((icmp_ln1494_5_reg_1023[0:0] === 1'b1) ? empty_48_reg_973 : 7'd0);

assign outputPrediction_TDATA = outputStream_V_data_V_1_data_out;

assign outputPrediction_TDEST = outputStream_V_dest_V_1_data_out;

assign outputPrediction_TID = outputStream_V_id_V_1_data_out;

assign outputPrediction_TKEEP = outputStream_V_keep_V_1_data_out;

assign outputPrediction_TLAST = outputStream_V_last_V_1_data_out;

assign outputPrediction_TSTRB = outputStream_V_strb_V_1_data_out;

assign outputPrediction_TUSER = outputStream_V_user_V_1_data_out;

assign outputPrediction_TVALID = outputStream_V_dest_V_1_state[1'd0];

assign outputStream_V_data_V_1_ack_in = outputStream_V_data_V_1_state[1'd1];

assign outputStream_V_data_V_1_ack_out = outputPrediction_TREADY;

assign outputStream_V_data_V_1_load_A = (outputStream_V_data_V_1_state_cmp_full & ~outputStream_V_data_V_1_sel_wr);

assign outputStream_V_data_V_1_load_B = (outputStream_V_data_V_1_state_cmp_full & outputStream_V_data_V_1_sel_wr);

assign outputStream_V_data_V_1_sel = outputStream_V_data_V_1_sel_rd;

assign outputStream_V_data_V_1_state_cmp_full = ((outputStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outputStream_V_data_V_1_vld_out = outputStream_V_data_V_1_state[1'd0];

assign outputStream_V_dest_V_1_ack_out = outputPrediction_TREADY;

assign outputStream_V_dest_V_1_data_out = 6'd0;

assign outputStream_V_dest_V_1_sel = outputStream_V_dest_V_1_sel_rd;

assign outputStream_V_dest_V_1_vld_out = outputStream_V_dest_V_1_state[1'd0];

assign outputStream_V_id_V_1_ack_out = outputPrediction_TREADY;

assign outputStream_V_id_V_1_data_out = 5'd0;

assign outputStream_V_id_V_1_sel = outputStream_V_id_V_1_sel_rd;

assign outputStream_V_id_V_1_vld_out = outputStream_V_id_V_1_state[1'd0];

assign outputStream_V_keep_V_1_ack_out = outputPrediction_TREADY;

assign outputStream_V_keep_V_1_data_out = 4'd15;

assign outputStream_V_keep_V_1_sel = outputStream_V_keep_V_1_sel_rd;

assign outputStream_V_keep_V_1_vld_out = outputStream_V_keep_V_1_state[1'd0];

assign outputStream_V_last_V_1_ack_in = outputStream_V_last_V_1_state[1'd1];

assign outputStream_V_last_V_1_ack_out = outputPrediction_TREADY;

assign outputStream_V_last_V_1_load_A = (outputStream_V_last_V_1_state_cmp_full & ~outputStream_V_last_V_1_sel_wr);

assign outputStream_V_last_V_1_load_B = (outputStream_V_last_V_1_state_cmp_full & outputStream_V_last_V_1_sel_wr);

assign outputStream_V_last_V_1_sel = outputStream_V_last_V_1_sel_rd;

assign outputStream_V_last_V_1_state_cmp_full = ((outputStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outputStream_V_last_V_1_vld_out = outputStream_V_last_V_1_state[1'd0];

assign outputStream_V_strb_V_1_ack_out = outputPrediction_TREADY;

assign outputStream_V_strb_V_1_data_out = 4'd15;

assign outputStream_V_strb_V_1_sel = outputStream_V_strb_V_1_sel_rd;

assign outputStream_V_strb_V_1_vld_out = outputStream_V_strb_V_1_state[1'd0];

assign outputStream_V_user_V_1_ack_out = outputPrediction_TREADY;

assign outputStream_V_user_V_1_data_out = 2'd0;

assign outputStream_V_user_V_1_sel = outputStream_V_user_V_1_sel_rd;

assign outputStream_V_user_V_1_vld_out = outputStream_V_user_V_1_state[1'd0];

assign select_ln850_1_fu_717_p3 = ((tmp_1_fu_693_p3[0:0] === 1'b1) ? select_ln851_1_fu_710_p3 : p_Result_s_52_reg_1130);

assign select_ln850_2_fu_748_p3 = ((tmp_2_fu_724_p3[0:0] === 1'b1) ? select_ln851_2_fu_741_p3 : p_Result_1_reg_1142);

assign select_ln850_3_fu_779_p3 = ((tmp_3_fu_755_p3[0:0] === 1'b1) ? select_ln851_3_fu_772_p3 : p_Result_3_reg_1154);

assign select_ln850_fu_681_p3 = ((tmp_fu_657_p3[0:0] === 1'b1) ? select_ln851_fu_674_p3 : p_Result_s_reg_1118);

assign select_ln851_1_fu_710_p3 = ((icmp_ln851_1_fu_700_p2[0:0] === 1'b1) ? p_Result_s_52_reg_1130 : add_ln700_1_fu_705_p2);

assign select_ln851_2_fu_741_p3 = ((icmp_ln851_2_fu_731_p2[0:0] === 1'b1) ? p_Result_1_reg_1142 : add_ln700_2_fu_736_p2);

assign select_ln851_3_fu_772_p3 = ((icmp_ln851_3_fu_762_p2[0:0] === 1'b1) ? p_Result_3_reg_1154 : add_ln700_3_fu_767_p2);

assign select_ln851_fu_674_p3 = ((icmp_ln851_fu_664_p2[0:0] === 1'b1) ? p_Result_s_reg_1118 : add_ln700_fu_669_p2);

assign tmp_1_fu_693_p3 = layer6_out_1_V_reg_1103[32'd7];

assign tmp_2_fu_724_p3 = layer6_out_2_V_reg_1108[32'd7];

assign tmp_3_fu_755_p3 = layer6_out_3_V_reg_1113[32'd7];

assign tmp_data_V_34_fu_688_p1 = $signed(select_ln850_fu_681_p3);

assign tmp_data_V_35_fu_786_p1 = $signed(select_ln850_1_reg_1171);

assign tmp_data_V_36_fu_790_p1 = $signed(select_ln850_2_reg_1176);

assign tmp_data_V_37_fu_794_p1 = $signed(select_ln850_3_reg_1181);

assign tmp_fu_657_p3 = layer6_out_0_V_reg_1098[32'd7];

assign trunc_ln731_10_fu_209_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_11_fu_213_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_12_fu_217_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_13_fu_221_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_14_fu_225_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_15_fu_229_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_16_fu_233_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_17_fu_237_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_18_fu_241_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_19_fu_245_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_1_fu_173_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_20_fu_249_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_21_fu_253_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_22_fu_257_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_23_fu_261_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_24_fu_265_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_25_fu_269_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_26_fu_273_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_27_fu_277_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_28_fu_281_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_29_fu_285_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_2_fu_177_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_3_fu_181_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_4_fu_185_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_5_fu_189_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_6_fu_193_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_7_fu_197_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_8_fu_201_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_9_fu_205_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln731_fu_169_p1 = inputStream_V_data_V_0_data_out[14:0];

assign trunc_ln851_1_fu_625_p1 = grp_dense_latency_0_0_0_s_fu_151_ap_return_1[5:0];

assign trunc_ln851_2_fu_639_p1 = grp_dense_latency_0_0_0_s_fu_151_ap_return_2[5:0];

assign trunc_ln851_3_fu_653_p1 = grp_dense_latency_0_0_0_s_fu_151_ap_return_3[5:0];

assign trunc_ln851_fu_611_p1 = grp_dense_latency_0_0_0_s_fu_151_ap_return_0[5:0];

assign trunc_ln92_fu_461_p1 = grp_dense_latency_0_0_0_1_fu_146_ap_return_9[6:0];

endmodule //myproject
